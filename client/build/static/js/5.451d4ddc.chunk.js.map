{"version":3,"sources":["components/Pages/ComposeEmail/components/ComposeForm/index.js","components/Pages/ComposeEmail/index.js","utils/reactConfirm.js","utils/Api.js"],"names":["ComposeForm","useState","loading","setLoading","onSubmit","event","a","preventDefault","form","target","data","FormData","Api","post","headers","status","confirm","title","message","confirmText","confirmColor","cancelText","reset","Form","Row","Col","md","FormGroup","Label","for","Input","required","type","min","name","id","placeholder","rows","Button","color","disabled","ComposeEmail","props","Container","className","confirmAjaxError","exception","status_code","response","error","config","url","confirmAjaxResponse","res","axios","create","defaults","baseURL","interceptors","use","Promise","reject"],"mappings":"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","file":"static/js/5.451d4ddc.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {Col, Row, Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport Api from \"../../../../../utils/Api\";\nimport confirm from \"reactstrap-confirm\"\n\nconst ComposeForm = ({...props} ) => {\n    const [loading,setLoading] = useState(false);\n    const onSubmit = async event =>{\n        event.preventDefault();\n        setLoading(true)\n        const form  = event.target\n        const data = new FormData(form);\n\n        try {\n\n\n            const res  = await Api.post(\"/create-message\",data,\n                {\n                    headers: {'Content-Type': 'multipart/form-data' }\n                });\n            if (res.status === 201){\n                await confirm({\n                    title: null,\n                    message: <p>\n                        the massage sent to the receiver\n                    </p>,\n\n                    confirmText: 'OK',\n                    confirmColor: 'success',\n                    cancelText: null\n                });\n                form.reset();\n            }\n        } catch (ignore) {\n        }\n        finally {\n            setLoading(false)\n\n        }\n    }\n    return (\n        <Form  onSubmit={onSubmit}>\n            <Row form>\n                <Col md={6}>\n                    <FormGroup>\n                        <Label for=\"form_sender_id\">From </Label>\n                        <Input required  type=\"number\" min={1} name=\"sender_id\" id=\"form_sender_id\" placeholder=\"select sender id \" />\n                    </FormGroup>\n                </Col>\n                <Col md={6}>\n                    <FormGroup>\n                        <Label for=\"form_receiver_id\">To</Label>\n                        <Input type=\"number\" min={1} name=\"receiver_id\" id=\"form_receiver_id\" placeholder=\"select receiver id\" />\n                    </FormGroup>\n                </Col>\n            </Row>\n            <FormGroup>\n                <Label for=\"form_subject\">Subject</Label>\n                <Input required type=\"text\" name=\"subject\" id=\"form_subject\" placeholder=\"Subject ... \"/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"form_content\">Content</Label>\n                <Input rows={10} type=\"textarea\" name=\"content\" id=\"form_content\" />\n            </FormGroup>\n            <Button color={\"primary\"} disabled={loading} type={\"submit\"}>Send</Button>\n        </Form>\n    );\n}\n\nexport default ComposeForm;\n\nComposeForm.propTypes = {\n    onSubmit: PropTypes.func\n};","import {Container} from \"reactstrap\";\nimport React from \"react\";\nimport {ComposeForm} from \"./components\";\nfunction ComposeEmail(props) {\n\n    return <Container className={\"\"}>\n        <h1 className=\"text-center py-4\" >Compose Email</h1>\n        <ComposeForm />\n    </Container>\n}\n\nexport default ComposeEmail","import React from \"react\";\nimport confirm from \"reactstrap-confirm\";\n\n\nconst confirmAjaxError = async  (exception) => {\n    const status_code = exception.response.status;\n    if (status_code >= 400 && status_code <= 600) {\n        const {data:{error = false} = {}} = exception.response;\n\n        await confirm({\n            title: `Server Error ${status_code}  - ${exception.config.url}`,\n            message: <div>\n                <p>\n                    {error ? error: exception.message}\n                </p>\n            </div>,\n\n            confirmText: 'OK',\n            confirmColor: 'info',\n            cancelText: null\n        });\n    }\n};\nexport{confirmAjaxError}\n\nconst  confirmAjaxResponse = async  (res,title = \"response\") => {\n    const {data:{error = false} = {}} = res\n    if (error) {\n        await confirm({\n            title: \"Error - \" + title,\n            message: error,\n\n            confirmText: 'Ok!',\n            confirmColor: 'info',\n            cancelText: null\n        });\n    }\n};\nexport {confirmAjaxResponse};\n","import axios from 'axios';\nimport {confirmAjaxResponse,confirmAjaxError} from \"./reactConfirm\";\n\nlet API_URL = \"/api\";\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    API_URL = 'http://localhost:5000/api';\n}\nconst Api = axios.create();\nApi.defaults.baseURL = API_URL;\n\n\nApi.interceptors.response.use(\n  async response => {\n      const url =response.config.url;\n\n      await confirmAjaxResponse(response,url);\n\n      return response\n  },\n   async (error) => {\n    await confirmAjaxError(error);\n\n    return Promise.reject(error);\n  });\n\nexport default Api\n"],"sourceRoot":""}