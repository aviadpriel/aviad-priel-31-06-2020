{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","routes.js","components/Pages/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","exact","tag","RRNavLink","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","activeClassName","Footer","ComposeEmail","React","lazy","routes","path","name","component","Pages","fallback","Spinner","size","map","route","idx","key","render","props","history","createHistory","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTA6BeA,MAzBf,WAAmB,IAAD,EACcC,oBAAS,GADvB,mBACPC,EADO,KACCC,EADD,KAKd,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAAEC,OAAO,MAC9B,kBAACC,EAAA,EAAD,CAAaC,OAAK,EAACC,IAAKC,IAAWC,GAAG,KAAtC,8BACA,kBAACC,EAAA,EAAD,CAAeC,QANR,WACXX,GAAWD,MAMP,kBAACa,EAAA,EAAD,CAAUb,OAAQA,EAAQc,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC3B,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASX,OAAK,EAAEG,GAAG,IAAIS,gBAAgB,SAASX,IAAKC,KAArD,kBAEJ,kBAACQ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASX,OAAK,EAACG,GAAG,SAASS,gBAAgB,SAASX,IAAKC,KAAzD,cCNTW,MAXf,WAEI,OAAO,4BAAQJ,UAAU,kBACrB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yBAAf,iBACiB,2BAAOA,UAAU,2BAAjB,iB,eCLvBK,EAAeC,IAAMC,MAAK,kBAAM,uDAUvBC,EANA,CACX,CAAEC,KAAM,SAAUlB,OAAO,EAAMmB,KAAM,cAAeC,UAJrCL,IAAMC,MAAK,kBAAM,+DAMhC,CAAEE,KAAM,IAAKlB,OAAO,EAAMmB,KAAM,gBAAiBC,UAAWN,ICoBjDO,MAxBf,WAGI,OAAO,kBAAC,WAAD,CAAUC,SAFM,kBAACC,EAAA,EAAD,CAAS3B,MAAO,OAAQ4B,KAAM,QAIjD,kBAAC,IAAD,KACKP,EAAOQ,KAAI,SAACC,EAAOC,GAGhB,OAAOD,EAAMN,WACT,kBAAC,IAAD,CACIQ,IAAKD,EACLT,KAAMQ,EAAMR,KACZlB,MAAO0B,EAAM1B,MACbmB,KAAMO,EAAMP,KACZU,OAAQ,SAAAC,GAAK,OACT,kBAACJ,EAAMN,UAAcU,SAXzC,OCLFC,EAAUC,cAgBDC,MAdf,WACE,OACI,kBAAC,IAAD,CAAeF,QAASA,GACtB,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,4BACf,kBAAC,EAAD,OAEA,kBAAC,EAAD,SCHUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASV,OACD,kBAAC,EAAD,MAINW,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.179858ff.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { NavLink as RRNavLink } from 'react-router-dom';\nimport {Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink} from \"reactstrap\";\n\nfunction Header() {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => {\n        setIsOpen(!isOpen);\n    };\n    return (\n        <Navbar color=\"dark\" dark  expand=\"md\">\n            <NavbarBrand exact tag={RRNavLink} to=\"/\">simple react and flask app</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar >\n                    <NavItem>\n                        <NavLink exact  to=\"/\" activeClassName=\"active\" tag={RRNavLink}>Compose email</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink exact to=\"/mange\" activeClassName=\"active\" tag={RRNavLink}>Mange</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>\n    );\n}\n\nHeader.propTypes = {};\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n\n    return <footer className='container py-4'>\n        <div className=\"row\">\n            <div className=\"col-sm-12 text-center\">\n               by Aviad Priel<small className=\"d-block mb-3 text-muted\">Â© 2020</small>\n            </div>\n        </div>\n    </footer>\n}\n\nexport default Footer;","import  React from \"react\";\n\nconst ComposeEmail = React.lazy(() => import('./components/Pages/ComposeEmail/index'));\nconst MangeEmail = React.lazy(() => import('./components/Pages/MangeEmail/index'));\n\n\nconst routes = [\n    { path: '/mange', exact: true, name: 'Mange Email', component: MangeEmail },\n\n    { path: '/', exact: true, name: 'Compose Email', component: ComposeEmail },\n\n];\nexport default routes;","import React, {Suspense} from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport {Spinner} from \"reactstrap\";\nimport routes from \"../../routes\";\n\nfunction Pages() {\n    const fallback = () => <Spinner color={\"dark\"} size={\"lg\"} />;\n\n    return <Suspense fallback={fallback()}>\n\n        <Switch>\n            {routes.map((route, idx) => {\n\n\n                return route.component && (\n                    <Route\n                        key={idx}\n                        path={route.path}\n                        exact={route.exact}\n                        name={route.name}\n                        render={props => (\n                            <route.component {...props} />\n                        )} />\n                ) ;\n            })}}\n        </Switch>\n    </Suspense>\n}\n\nexport default Pages","import React from 'react';\nimport './App.css';\nimport { createBrowserHistory as createHistory } from \"history\";\nimport { BrowserRouter} from \"react-router-dom\";\nimport {Header,Footer,Pages} from \"./components\";\nconst history = createHistory();\n\nfunction App() {\n  return (\n      <BrowserRouter history={history}>\n        <div className=\"App\">\n          <Header />\n          <div className=\"app-body container-fluid\">\n          <Pages/>\n          </div>\n          <Footer/>\n        </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n        <App />\n//<React.StrictMode>\n//   </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}